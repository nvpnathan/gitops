apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: go-reminders

spec:
  entrypoint: go-reminders
  volumes:
  - name: harbor-secret-vol
    secret:
      secretName: harbor-creds
  - name: harbor-cert-vol
    secret:
      secretName: harbor-cert
  arguments:
    parameters:
    - name: repo
      value: https://github.com/tkrausjr/go-reminders.git
    - name: revision
      value: master

  templates:
  - name: go-reminders
    steps:
    - - name: checkout
        template: checkout  
    # Run Golang tests for the Application
    - - name: test
        template: test
        arguments:
          artifacts:
          - name: source
            from: "{{steps.checkout.outputs.artifacts.source}}"
    # This step will stop the workflow based on Go Test Results
    - - name: test-failure
        template: test-failure             # exit fail workflow if test results "fail"
        when: "{{steps.test.outputs.result}} != ok"
        arguments: 
           parameters:
           - name: avalue
             value: "{{steps.test.outputs.result}}"
    # Run Makefile to build the Golang Source into Binary
    - - name: build
        template: build
        when: "{{steps.test.outputs.result}} == ok"
        arguments:
          artifacts:
          - name: source
            from: "{{steps.checkout.outputs.artifacts.source}}"
    # Build a new container with Golang Binary and upload to Registry
    - - name: dind-build
        template: dind-build
        arguments:
          artifacts:
          - name: source
            from: "{{steps.checkout.outputs.artifacts.source}}"
          - name: go-reminders
            from: "{{steps.build.outputs.artifacts.go-reminders}}"
          parameters:
          - name: git-commit
            value: "{{steps.build.outputs.parameters.git-commit}}"

  - name: checkout
    inputs:
      artifacts:
      - name: source
        path: /src
        git:
          repo: "{{workflow.parameters.repo}}"
          revision: "{{workflow.parameters.revision}}"
    outputs:
      artifacts:
      - name: source
        path: /src
    container:
      image: golang:1.13.4
      command: ["/bin/sh", "-c"]
      args: ["cd /src && git status && ls -l"]
  
  # Return ok or fail from running App Golang _test files
  - name: test
    inputs:
      artifacts:
      - name: source
        path: /go/src/github.com/tkrausjr/go-reminders
    script:
      image: golang:1.13.4
      command: ["/bin/sh"]
      source: |
        cd /go/src/github.com/tkrausjr/go-reminders
        git submodule init 
        git submodule update --recursive 
        go test ./internal/app  | tail -n1 | cut -f 1 -d ' '
  
  # This step will fail the workflow
  # I think I can remove this step and go from test --> build with the dependency on 
  - name: test-failure
    inputs:
      parameters:
        - name: avalue
    container:
      image: golang:1.13.4
      command: [sh, -c]
      args: ["
        echo \"GoLang Tests FAILED !!! \"  &&
        echo \"GoLang Test result was\"  {{inputs.parameters.avalue}} &&
        exit 1
      "] 

  - name: build
    inputs:
      artifacts:
      - name: source
        path: /go/src/github.com/tkrausjr/go-reminders
    outputs:
      artifacts:
      - name: go-reminders
        path: /go/src/github.com/tkrausjr/go-reminders/cmd/go-reminders
      parameters:
      - name: git-commit		# name of output parameter
        valueFrom:
          path: /tmp/commit.txt
    container:
      image: golang:1.13.4
      command: ["/bin/sh", "-c"]
      args: ["
        cd /go/src/github.com/tkrausjr/go-reminders &&
        git submodule init &&
        git submodule update --recursive &&
        git rev-parse --short=7 HEAD > /tmp/commit.txt &&
        make
      "]
      resources:
        requests:
          memory: 1024Mi
          cpu: 200m

  - name: dind-build
    inputs:
      artifacts:
      - name: go-reminders
        path: /go/src/github.com/tkrausjr/go-reminders/cmd/go-reminders
      - name: source
        path: /go/src/github.com/tkrausjr/go-reminders
      parameters:
      - name: git-commit
    container:
      image: docker:17.10
      securityContext:
        privileged: true
      command: [sh, -c]
      args: ["cd /go/src/github.com/tkrausjr/go-reminders/ &&
            mkdir -p html/skeleton &&
            cp -a web/static/Skeleton/css html/skeleton/ &&
            cp -a web/static/Skeleton/images html/skeleton/ &&
            cp -a web/templates/tmpl html/ &&
            cp -a web/templates/stats html/ &&
            until docker ps; do sleep 3; done; docker build -t harbor.tpmlab.vmware.com/library/go-reminders:{{inputs.parameters.git-commit}} . &&
            docker login harbor.tpmlab.vmware.com -u admin -p $HARBORPASSWORD &&
            docker push harbor.tpmlab.vmware.com/library/go-reminders:{{inputs.parameters.git-commit}}"]
      # To access secrets as environment variables, use the k8s valueFrom and
      # secretKeyRef constructs.
      env:
      - name: DOCKER_HOST               # the docker daemon can be access on the standard port on localhost
        value: 127.0.0.1
      - name: HARBORPASSWORD  # name of env var
        valueFrom:
          secretKeyRef:
            name: harbor-creds    # name of an existing k8s secret
            key: password     # 'key' subcomponent of the secret
      - name: HARBORCERT  # name of env var
        valueFrom:
          secretKeyRef:
            name: harbor-cert    # name of an existing k8s secret
            key: ca.crt     # 'key' subcomponent of the secret
      volumeMounts:
      - name: harbor-secret-vol     # mount file containing secret at /secret/mountpath
        mountPath: "/secret/mountpath"
      - name: harbor-cert-vol     # mount file containing secret at /secret/mountpath
        mountPath: "/etc/docker/certs.d/harbor.tpmlab.vmware.com"
    sidecars:
    - name: dind
      image: docker:17.10-dind          # Docker already provides an image for running a Docker daemon
      env:
      - name: DOCKER_HOST               # the docker daemon can be access on the standard port on localhost
        value: 127.0.0.1
      - name: HARBORPASSWORD  # name of env var
        valueFrom:
          secretKeyRef:
            name: harbor-creds    # name of an existing k8s secret
            key: password     # 'key' subcomponent of the secret
      - name: HARBORCERT  # name of env var
        valueFrom:
          secretKeyRef:
            name: harbor-cert    # name of an existing k8s secret
            key: ca.crt     # 'key' subcomponent of the secret
      securityContext:
        privileged: true                # the Docker daemon can only run in a privileged container
      # mirrorVolumeMounts will mount the same volumes specified in the main container
      # to the sidecar (including artifacts), at the same mountPaths. This enables
      # dind daemon to (partially) see the same filesystem as the main container in
      # order to use features such as docker volume binding.
      mirrorVolumeMounts: true
